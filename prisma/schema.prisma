// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Tweet         Tweet[]
    Comment       Comment[]
    Retweet       Retweet[]
    Bookmark      Bookmark[]
    TweetLike     TweetLike[]
    CommentLike   CommentLike[]
    followedBy    User[]        @relation("UserFollows", fields: [followedByIDs], references: [id])
    followedByIDs String[]      @db.ObjectId
    following     User[]        @relation("UserFollows", fields: [followingIDs], references: [id])
    followingIDs  String[]      @db.ObjectId
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tweet {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @db.ObjectId
    image      String?
    imageID    String?
    text       String
    authorized Authorized  @default(PUBLIC)
    comments   Comment[]
    retweets   Retweet[]
    likes      TweetLike[]
    Bookmark   Bookmark[]
    createdAt  DateTime    @default(now())
}

model Comment {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    Tweet     Tweet?        @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    tweetId   String?       @db.ObjectId
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String        @db.ObjectId
    image     String?
    imageID   String?
    text      String
    likes     CommentLike[]
    createdAt DateTime      @default(now())
}

model Retweet {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    Tweet   Tweet?  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    tweetId String? @db.ObjectId
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String  @db.ObjectId
}

model TweetLike {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String  @db.ObjectId
    Tweet   Tweet?  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    tweetId String? @db.ObjectId
}

model CommentLike {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?  @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.ObjectId
}

model Bookmark {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String  @db.ObjectId
    Tweet   Tweet?  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
    tweetId String? @db.ObjectId
}

enum Authorized {
    PUBLIC
    FOLLOWER
}
